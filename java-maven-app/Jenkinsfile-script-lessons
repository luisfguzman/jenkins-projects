//CODE_CHANGES = getGitChanges() // a groovy script who would get if there are code changes in repository
def gv
pipeline {
  agent any
  environment { //env variables available on all stages
    NEW_VERSION = '1.3.0'
    SERVER_CREDENTIALS = credentials('server-credentials')
  } 
  parameters { //parametize your build
    string(name: 'VERSION', defaultValue: '', description: 'version to depply to prod')
    choice(name: 'VERSION', choices: ['1.0', '2.0', '3.0'], description: 'version to depply to prod')
    booleanPAram(name: 'executeTests', defaultValue: true, description: 'should execute tests?')
  }
  tools { //build tools declaration
    maven "maven-3.9"
  }
  stages {
    stage("init") {
      steps {
        script {
          gv = load "script.groovy"
        }
      }
    }
    stage("build") {
      when { // conditionals
        expression { //expression
          params.executeTests
        }
      }
      steps {
        script {
          gv.buildApp
        }
        echo "building version ${NEW_VERSION}"
        sh "maven package"
      }
    }
    stage("test") {
      steps {
        echo 'testing the application'
        withCredentials([
          usernamePassword(credentialsId: 'server-credentials', usernameVariable: USER, passwordVariable: PWD)
        ]) {
          sh "some script ${USER} ${PWD}"
        }
      }
    }
    stage("deploy") {
      input { //allows for users to enter input parameters for example like a  version
        message "select the env to deploy to"
        ok "Done"
        parameters {
          choice(name: 'ENV', choices: ['dev', 'stg', 'prod'], description: 'env to deploy to prod')
        }
      }
      steps {
        echo "deploying the application ${params.VERSION}"
        echo "deploying with ${SERVER_CREDENTIALS}"
        echo "deploying to ${ENV}"
      }
    }
  }
  post { //post pipeline steps to do
    always {
      //always excecutes
    }
    sucess {
      //when build is good
    }
    failure {
      //when something goes wrong
    }
  }
}
